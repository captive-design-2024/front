{"ast":null,"code":"var _jsxFileName = \"/Users/wonseok/Desktop/react/hello/src/routes/BoardList.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport { Link, useNavigate } from 'react-router-dom';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst BoardList = () => {\n  _s();\n  const navigate = useNavigate();\n  const [boardList, setBoardList] = useState([]);\n  const mockBoardList = [{\n    idx: 1,\n    title: 'Board 1'\n  }, {\n    idx: 2,\n    title: 'Board 2'\n  }, {\n    idx: 3,\n    title: 'Board 3'\n  }\n  // Add more mock data as needed\n  ];\n  const getBoardList = () => {\n    // Simulate fetching data from an API\n    // You can replace this with your actual data fetching logic\n    // For now, I'll just set the mock data directly\n    setBoardList(mockBoardList);\n  };\n  const moveToWrite = () => {\n    navigate('/write');\n  };\n  useEffect(() => {\n    getBoardList();\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"ul\", {\n      children: boardList.map(board => /*#__PURE__*/_jsxDEV(\"li\", {\n        children: /*#__PURE__*/_jsxDEV(Link, {\n          to: `/board/${board.idx}`,\n          children: board.title\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 35,\n          columnNumber: 13\n        }, this)\n      }, board.idx, false, {\n        fileName: _jsxFileName,\n        lineNumber: 34,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: moveToWrite,\n        children: \"\\uAE00\\uC4F0\\uAE30\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 40,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 31,\n    columnNumber: 5\n  }, this);\n};\n_s(BoardList, \"zRufRzrwhXJa22MkvxgjkGE618Y=\", false, function () {\n  return [useNavigate];\n});\n_c = BoardList;\nexport default BoardList;\nvar _c;\n$RefreshReg$(_c, \"BoardList\");","map":{"version":3,"names":["React","useEffect","useState","Link","useNavigate","jsxDEV","_jsxDEV","BoardList","_s","navigate","boardList","setBoardList","mockBoardList","idx","title","getBoardList","moveToWrite","children","map","board","to","fileName","_jsxFileName","lineNumber","columnNumber","onClick","_c","$RefreshReg$"],"sources":["/Users/wonseok/Desktop/react/hello/src/routes/BoardList.js"],"sourcesContent":["import React, { useEffect, useState } from 'react';\nimport { Link, useNavigate } from 'react-router-dom';\n\nconst BoardList = () => {\n  const navigate = useNavigate();\n  const [boardList, setBoardList] = useState([]);\n\n  const mockBoardList = [\n    { idx: 1, title: 'Board 1' },\n    { idx: 2, title: 'Board 2' },\n    { idx: 3, title: 'Board 3' },\n    // Add more mock data as needed\n  ];\n\n  const getBoardList = () => {\n    // Simulate fetching data from an API\n    // You can replace this with your actual data fetching logic\n    // For now, I'll just set the mock data directly\n    setBoardList(mockBoardList);\n  };\n\n  const moveToWrite = () => {\n    navigate('/write');\n  };\n\n  useEffect(() => {\n    getBoardList();\n  }, []);\n\n  return (\n    <div>\n      <ul>\n        {boardList.map((board) => (\n          <li key={board.idx}>\n            <Link to={`/board/${board.idx}`}>{board.title}</Link>\n          </li>\n        ))}\n      </ul>\n      <div>\n        <button onClick={moveToWrite}>글쓰기</button>\n      </div>\n    </div>\n  );\n};\n\nexport default BoardList;\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAClD,SAASC,IAAI,EAAEC,WAAW,QAAQ,kBAAkB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAErD,MAAMC,SAAS,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACtB,MAAMC,QAAQ,GAAGL,WAAW,CAAC,CAAC;EAC9B,MAAM,CAACM,SAAS,EAAEC,YAAY,CAAC,GAAGT,QAAQ,CAAC,EAAE,CAAC;EAE9C,MAAMU,aAAa,GAAG,CACpB;IAAEC,GAAG,EAAE,CAAC;IAAEC,KAAK,EAAE;EAAU,CAAC,EAC5B;IAAED,GAAG,EAAE,CAAC;IAAEC,KAAK,EAAE;EAAU,CAAC,EAC5B;IAAED,GAAG,EAAE,CAAC;IAAEC,KAAK,EAAE;EAAU;EAC3B;EAAA,CACD;EAED,MAAMC,YAAY,GAAGA,CAAA,KAAM;IACzB;IACA;IACA;IACAJ,YAAY,CAACC,aAAa,CAAC;EAC7B,CAAC;EAED,MAAMI,WAAW,GAAGA,CAAA,KAAM;IACxBP,QAAQ,CAAC,QAAQ,CAAC;EACpB,CAAC;EAEDR,SAAS,CAAC,MAAM;IACdc,YAAY,CAAC,CAAC;EAChB,CAAC,EAAE,EAAE,CAAC;EAEN,oBACET,OAAA;IAAAW,QAAA,gBACEX,OAAA;MAAAW,QAAA,EACGP,SAAS,CAACQ,GAAG,CAAEC,KAAK,iBACnBb,OAAA;QAAAW,QAAA,eACEX,OAAA,CAACH,IAAI;UAACiB,EAAE,EAAG,UAASD,KAAK,CAACN,GAAI,EAAE;UAAAI,QAAA,EAAEE,KAAK,CAACL;QAAK;UAAAO,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAO;MAAC,GAD9CL,KAAK,CAACN,GAAG;QAAAQ,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAEd,CACL;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACA,CAAC,eACLlB,OAAA;MAAAW,QAAA,eACEX,OAAA;QAAQmB,OAAO,EAAET,WAAY;QAAAC,QAAA,EAAC;MAAG;QAAAI,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAQ;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACvC,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACH,CAAC;AAEV,CAAC;AAAChB,EAAA,CAxCID,SAAS;EAAA,QACIH,WAAW;AAAA;AAAAsB,EAAA,GADxBnB,SAAS;AA0Cf,eAAeA,SAAS;AAAC,IAAAmB,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}